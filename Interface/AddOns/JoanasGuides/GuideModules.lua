select(2, ...).SetupGlobalFacade()

GuideModules = { }

local modules

--todo: break out into autogenerated data file
local AddonVersion = "2.1.04"

local GuideModulesBase = {
	Starter = {
		name = "Starter",
		latest = "2.1.04",
		minimum = "2.1.04"
	},
	Era = {
		name = "Classic Era",
		latest = "2.1.02",
		minimum = "2.1.01"
	},
	TBC = {
		name = "The Burning Crusade",
		latest = "2.1.02",
		minimum = "2.1.01"
	},
	Wrath = {
		name = "Wrath of the Lich King",
		latest = "2.1.03",
		minimum = "2.1.01",
	}
}

-- Module properties
-- version: the version of the guide module
-- latest: latest known version of the guide module as of this addon's release
-- minimum: minimum version of the guide module that is compatible with this version of the addon
-- maximum: maximum version of the
-- requires: minimum version of the addon that the guide module requires in order to function
-- preferred: latest known version of the addon available at the time of the guide module's release
-- installed: (boolean or nil) determines that the guide was able to be loaded, but not necessarily that it is compatible
-- compatible: (boolean or nil) determines that the guide is compatible with the addon

local LatestAddonVersion = AddonVersion

function GuideModules.GetAddonVersion()
	return AddonVersion
end

function GuideModules.GetModule(moduleID)
	return modules[moduleID]
end

function GuideModules.Reload()
	modules = { }
	local warnings = { }
	local incompatible
	for moduleName, moduleInfoBase in pairs(GuideModulesBase) do
		modules[moduleName] = {
			latest = moduleInfoBase.latest,
			minimum = moduleInfoBase.minimum,
			name = moduleInfoBase.name,
		}
		local moduleInfo = modules[moduleName]
		local metadataHTML = CreateFrame("SimpleHTML", nil, nil, ("JoanasGuides-%s-metadata"):format(moduleName))
		local regions = { metadataHTML:GetRegions() }
		if (#regions > 0) then
			local dataParts = { }
			for _, region in ipairs(regions) do
				table.insert(dataParts, RemoveSpaces(region:GetText()))
			end
			local metadata = loadstring(Base64.decode(table.concat(dataParts)))()
			moduleInfo.version = metadata.version
			moduleInfo.requires = metadata.requires
			moduleInfo.installed = true
			moduleInfo.preferred = metadata.preferred
		end
		if (moduleInfo.installed) then
			moduleInfo.compatible = (AddonVersion >= moduleInfo.requires and moduleInfo.version >= moduleInfo.minimum)
			moduleInfo.current = (moduleInfo.version >= moduleInfo.latest)
			LatestAddonVersion = (moduleInfo.preferred > LatestAddonVersion) and moduleInfo.preferred or LatestAddonVersion
			if (not moduleInfo.current) then
				table.insert(warnings, ("Guide: %s"):format(moduleInfo.name))
			end
			if (not moduleInfo.compatible) then
				incompatible = true
			end
		end
	end
	if (LatestAddonVersion > AddonVersion) then
		table.insert(warnings, 1, "Addon: Joana's Guides")
	end
	if (#warnings > 0) then
		table.insert(warnings, 1, " ")
		table.insert(warnings, 1, "Please update the following and then type /reload")
		if (incompatible) then
			table.insert(warnings, 1, " ")
			table.insert(warnings, 1, "Incompatible versions found!")
		end
		Guide.SetWarnings(warnings)
	else
		Guide.ClearWarnings()
	end
	UI.MarkDirty()
	Condition_ResetGuides()
end
